/*
 * generated by Xtext 2.15.0
 */
package org.xtext.imt.browserautomation.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.imt.browserautomation.browserAutomation.Test
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import org.xtext.imt.browserautomation.browserAutomation.OPEN_BROWSER
import org.xtext.imt.browserautomation.browserAutomation.GO_TO_URL
import org.xtext.imt.browserautomation.browserAutomation.CLICK_ON
import org.xtext.imt.browserautomation.browserAutomation.BUTTON
import org.xtext.imt.browserautomation.browserAutomation.Clickable
import org.xtext.imt.browserautomation.browserAutomation.TEXT
import org.xtext.imt.browserautomation.browserAutomation.COMBOBOX
import org.xtext.imt.browserautomation.browserAutomation.CHECKBOX
import org.xtext.imt.browserautomation.browserAutomation.SEARCH_FIELD
import org.xtext.imt.browserautomation.browserAutomation.VERIFY_THAT
import org.xtext.imt.browserautomation.browserAutomation.INSERT_ON
import org.xtext.imt.browserautomation.browserAutomation.CHECK_BOXE
import org.xtext.imt.browserautomation.browserAutomation.CHOOSE_COMBOBOX
import org.xtext.imt.browserautomation.browserAutomation.READ_ON
import org.xtext.imt.browserautomation.browserAutomation.AFFECTATION
import org.xtext.imt.browserautomation.browserAutomation.LINK
import org.xtext.imt.browserautomation.browserAutomation.IMAGE
import org.xtext.imt.browserautomation.browserAutomation.Insertable
import org.xtext.imt.browserautomation.browserAutomation.Verifiable
import org.xtext.imt.browserautomation.browserAutomation.Readable
import org.xtext.imt.browserautomation.browserAutomation.RefElement
import org.xtext.imt.browserautomation.browserAutomation.SELECTOR
import org.xtext.imt.browserautomation.browserAutomation.PARAMS

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BrowserAutomationGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Test)) {
			fsa.generateFile(e.fullyQualifiedName.toString("/") + ".java", e.compile)
		}
		i=0;
	}
	
	private int i = 0; 
	

	def compile(Test test) ''' 
		package org.openqa.selenium.example;
		import org.openqa.selenium.By;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.firefox.FirefoxDriver;
		import org.openqa.selenium.support.ui.ExpectedConditions;
		import org.openqa.selenium.support.ui.WebDriverWait;
		import static org.junit.jupiter.api.Assertions.assertNotNull;
		import org.junit.jupiter.api.Test;
		import java.util.HashMap;
		
		public class «test.name» {
			
			@Test
			public void test(){		
				
				HashMap<String, WebElement> refsElement = new HashMap<>();
				boolean cookiesAlreadyChecked = false;
										
	
				«FOR instruction : test.instructions»
					«instruction.compileInstruction»
				«ENDFOR» 
				driver.close();
			}   				
		}
	'''

	def dispatch compileInstruction(AFFECTATION affectation) '''
		WebElement «affectation.name» = driver.findElement(«affectation.selector.compileSelector»);		
		refsElement.put("«affectation.name»",«affectation.name»);
		assertNotNull(refsElement.get("«affectation.name»"));
	'''
	
	def compileSelector(SELECTOR selector) '''
		«FOR param : selector.params»
				«param.compileParam»
		«ENDFOR» 
	'''
	
	def compileParam(PARAMS param) '''
		«IF param.key == "class"»
		By.className("«param.value»")
		«ELSE»
		compile params not defined yet key :  «param.key» value «param.value»
		«ENDIF»
	'''

	def dispatch compileInstruction(OPEN_BROWSER instructionOpenBrowser) '''
		WebDriver driver = new FirefoxDriver();
	'''

	def dispatch compileInstruction(GO_TO_URL instructionGoToUrl) '''
		driver.get("«instructionGoToUrl.url»");
		
		if(!cookiesAlreadyChecked) {
			new WebDriverWait(driver, 20).until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@class='agree-button eu-cookie-compliance-default-button']"))).click(); //ACCEPT COOKIE		
			cookiesAlreadyChecked = true;
		}			
	'''

	def dispatch compileInstruction(CLICK_ON instructionClickOn) '''
		«IF instructionClickOn.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.BUTTONImpl" 
		 || instructionClickOn.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.LINKImpl" 
		 || instructionClickOn.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.IMAGEImpl"»		
		driver.findElement(By.partialLinkText("«instructionClickOn.element.compileClickable»")).click();
		«ELSEIF instructionClickOn.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.SEARCH_FIELDImpl"»
		driver.findElement((By.xpath("//input[@value='«instructionClickOn.element.compileClickable»']"))).click();
		«ELSE»
		«instructionClickOn.element.compileElement».click();
		«ENDIF»	
	'''

	def dispatch compileInstruction(VERIFY_THAT instructionVerifyThat) '''
		«IF instructionVerifyThat.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.TEXTImpl" 
		 || instructionVerifyThat.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.LINKImpl" 
		 || instructionVerifyThat.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.IMAGEImpl" 
		 || instructionVerifyThat.element.class.toString == "class org.xtext.imt.browserautomation.browserAutomation.impl.BUTTONImpl"»	
		WebElement textDemo«i» = driver.findElement(By.xpath("//*[contains(text(),'«instructionVerifyThat.element.compileVerifiable»')]"));
		assertNotNull(textDemo«i++»);
		«ELSE»
		assertNotNull(«instructionVerifyThat.element.compileElement»);
		«ENDIF»						
	'''

	def dispatch compileInstruction(INSERT_ON instructionInsertOn) '''
		driver.findElement((By.xpath("//input[@name='«instructionInsertOn.element.compileInsertable»']"))).sendKeys("«instructionInsertOn.data»");
	'''

	def dispatch compileInstruction(CHECK_BOXE instructionCheckBoxe) '''
		«FOR checkbox : instructionCheckBoxe.element»
					driver.findElement(By.xpath("//*[contains(text(),'«checkbox.compileElement»')]")).click();
		«ENDFOR» 		
	'''

	def dispatch compileInstruction(CHOOSE_COMBOBOX instructionChooseCombobox) '''
		        WebElement textDemo«i» = driver.findElement(By.xpath("//*[@id='«instructionChooseCombobox.element.compileElement»']"));
		        textDemo«i++».click();
		
		        for (WebElement webElement : driver.findElements(By.xpath("//*[contains(text(),'«instructionChooseCombobox.data»')]"))) {
		            if (webElement.isDisplayed()){
		                webElement.click();
		            }
		        }
	'''

	def dispatch compileInstruction(READ_ON instructionReadOn) '''
		instructions not defined yet «instructionReadOn.toString»
	'''

	def compileClickable(Clickable clickable) '''«clickable.compileElement»'''

	def compileReadable(Readable readable) '''«readable.compileElement»'''

	def compileInsertable(Insertable insertable) '''«insertable.compileElement»'''

	def compileVerifiable(Verifiable verifiable) '''«verifiable.compileElement»'''

	def dispatch compileElement(BUTTON f) '''«f.name»'''

	def dispatch compileElement(TEXT f) '''«f.name»'''

	def dispatch compileElement(SEARCH_FIELD f) '''«f.name»'''

	def dispatch compileElement(CHECKBOX f) '''«f.name»'''

	def dispatch compileElement(COMBOBOX f) '''«f.name»'''

	def dispatch compileElement(LINK f) '''«f.url»'''

	def dispatch compileElement(RefElement f) '''refsElement.get("«f.ref.name»")'''
}
