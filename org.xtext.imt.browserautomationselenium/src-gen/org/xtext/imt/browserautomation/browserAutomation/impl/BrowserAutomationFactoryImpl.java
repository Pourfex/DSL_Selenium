/**
 * generated by Xtext 2.15.0
 */
package org.xtext.imt.browserautomation.browserAutomation.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.imt.browserautomation.browserAutomation.AFFECTATION;
import org.xtext.imt.browserautomation.browserAutomation.BUTTON;
import org.xtext.imt.browserautomation.browserAutomation.BrowserAutomationFactory;
import org.xtext.imt.browserautomation.browserAutomation.BrowserAutomationPackage;
import org.xtext.imt.browserautomation.browserAutomation.CHECKBOX;
import org.xtext.imt.browserautomation.browserAutomation.CHECK_BOXE;
import org.xtext.imt.browserautomation.browserAutomation.CHOOSE_COMBOBOX;
import org.xtext.imt.browserautomation.browserAutomation.CLICK_ON;
import org.xtext.imt.browserautomation.browserAutomation.COMBOBOX;
import org.xtext.imt.browserautomation.browserAutomation.Clickable;
import org.xtext.imt.browserautomation.browserAutomation.Element;
import org.xtext.imt.browserautomation.browserAutomation.GO_TO_URL;
import org.xtext.imt.browserautomation.browserAutomation.IMAGE;
import org.xtext.imt.browserautomation.browserAutomation.INSERT_ON;
import org.xtext.imt.browserautomation.browserAutomation.Insertable;
import org.xtext.imt.browserautomation.browserAutomation.Instruction;
import org.xtext.imt.browserautomation.browserAutomation.LINK;
import org.xtext.imt.browserautomation.browserAutomation.OPEN_BROWSER;
import org.xtext.imt.browserautomation.browserAutomation.PARAMS;
import org.xtext.imt.browserautomation.browserAutomation.READ_ON;
import org.xtext.imt.browserautomation.browserAutomation.RefElement;
import org.xtext.imt.browserautomation.browserAutomation.SEARCH_FIELD;
import org.xtext.imt.browserautomation.browserAutomation.SELECTOR;
import org.xtext.imt.browserautomation.browserAutomation.TEXT;
import org.xtext.imt.browserautomation.browserAutomation.Test;
import org.xtext.imt.browserautomation.browserAutomation.VERIFY_THAT;
import org.xtext.imt.browserautomation.browserAutomation.Verifiable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BrowserAutomationFactoryImpl extends EFactoryImpl implements BrowserAutomationFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BrowserAutomationFactory init()
  {
    try
    {
      BrowserAutomationFactory theBrowserAutomationFactory = (BrowserAutomationFactory)EPackage.Registry.INSTANCE.getEFactory(BrowserAutomationPackage.eNS_URI);
      if (theBrowserAutomationFactory != null)
      {
        return theBrowserAutomationFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BrowserAutomationFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserAutomationFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BrowserAutomationPackage.TEST: return createTest();
      case BrowserAutomationPackage.INSTRUCTION: return createInstruction();
      case BrowserAutomationPackage.AFFECTATION: return createAFFECTATION();
      case BrowserAutomationPackage.SELECTOR: return createSELECTOR();
      case BrowserAutomationPackage.REF_ELEMENT: return createRefElement();
      case BrowserAutomationPackage.ELEMENT: return createElement();
      case BrowserAutomationPackage.OPEN_BROWSER: return createOPEN_BROWSER();
      case BrowserAutomationPackage.GO_TO_URL: return createGO_TO_URL();
      case BrowserAutomationPackage.CLICK_ON: return createCLICK_ON();
      case BrowserAutomationPackage.VERIFY_THAT: return createVERIFY_THAT();
      case BrowserAutomationPackage.INSERT_ON: return createINSERT_ON();
      case BrowserAutomationPackage.CHECK_BOXE: return createCHECK_BOXE();
      case BrowserAutomationPackage.CHOOSE_COMBOBOX: return createCHOOSE_COMBOBOX();
      case BrowserAutomationPackage.READ_ON: return createREAD_ON();
      case BrowserAutomationPackage.READABLE: return createReadable();
      case BrowserAutomationPackage.INSERTABLE: return createInsertable();
      case BrowserAutomationPackage.VERIFIABLE: return createVerifiable();
      case BrowserAutomationPackage.CLICKABLE: return createClickable();
      case BrowserAutomationPackage.COMBOBOX: return createCOMBOBOX();
      case BrowserAutomationPackage.CHECKBOX: return createCHECKBOX();
      case BrowserAutomationPackage.SEARCH_FIELD: return createSEARCH_FIELD();
      case BrowserAutomationPackage.TEXT: return createTEXT();
      case BrowserAutomationPackage.BUTTON: return createBUTTON();
      case BrowserAutomationPackage.LINK: return createLINK();
      case BrowserAutomationPackage.IMAGE: return createIMAGE();
      case BrowserAutomationPackage.PARAMS: return createPARAMS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Test createTest()
  {
    TestImpl test = new TestImpl();
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AFFECTATION createAFFECTATION()
  {
    AFFECTATIONImpl affectation = new AFFECTATIONImpl();
    return affectation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SELECTOR createSELECTOR()
  {
    SELECTORImpl selector = new SELECTORImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RefElement createRefElement()
  {
    RefElementImpl refElement = new RefElementImpl();
    return refElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OPEN_BROWSER createOPEN_BROWSER()
  {
    OPEN_BROWSERImpl opeN_BROWSER = new OPEN_BROWSERImpl();
    return opeN_BROWSER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GO_TO_URL createGO_TO_URL()
  {
    GO_TO_URLImpl gO_TO_URL = new GO_TO_URLImpl();
    return gO_TO_URL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CLICK_ON createCLICK_ON()
  {
    CLICK_ONImpl clicK_ON = new CLICK_ONImpl();
    return clicK_ON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VERIFY_THAT createVERIFY_THAT()
  {
    VERIFY_THATImpl verifY_THAT = new VERIFY_THATImpl();
    return verifY_THAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public INSERT_ON createINSERT_ON()
  {
    INSERT_ONImpl inserT_ON = new INSERT_ONImpl();
    return inserT_ON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CHECK_BOXE createCHECK_BOXE()
  {
    CHECK_BOXEImpl checK_BOXE = new CHECK_BOXEImpl();
    return checK_BOXE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CHOOSE_COMBOBOX createCHOOSE_COMBOBOX()
  {
    CHOOSE_COMBOBOXImpl choosE_COMBOBOX = new CHOOSE_COMBOBOXImpl();
    return choosE_COMBOBOX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public READ_ON createREAD_ON()
  {
    READ_ONImpl reaD_ON = new READ_ONImpl();
    return reaD_ON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.imt.browserautomation.browserAutomation.Readable createReadable()
  {
    ReadableImpl readable = new ReadableImpl();
    return readable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Insertable createInsertable()
  {
    InsertableImpl insertable = new InsertableImpl();
    return insertable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Verifiable createVerifiable()
  {
    VerifiableImpl verifiable = new VerifiableImpl();
    return verifiable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clickable createClickable()
  {
    ClickableImpl clickable = new ClickableImpl();
    return clickable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public COMBOBOX createCOMBOBOX()
  {
    COMBOBOXImpl combobox = new COMBOBOXImpl();
    return combobox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CHECKBOX createCHECKBOX()
  {
    CHECKBOXImpl checkbox = new CHECKBOXImpl();
    return checkbox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SEARCH_FIELD createSEARCH_FIELD()
  {
    SEARCH_FIELDImpl searcH_FIELD = new SEARCH_FIELDImpl();
    return searcH_FIELD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TEXT createTEXT()
  {
    TEXTImpl text = new TEXTImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BUTTON createBUTTON()
  {
    BUTTONImpl button = new BUTTONImpl();
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LINK createLINK()
  {
    LINKImpl link = new LINKImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IMAGE createIMAGE()
  {
    IMAGEImpl image = new IMAGEImpl();
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PARAMS createPARAMS()
  {
    PARAMSImpl params = new PARAMSImpl();
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserAutomationPackage getBrowserAutomationPackage()
  {
    return (BrowserAutomationPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BrowserAutomationPackage getPackage()
  {
    return BrowserAutomationPackage.eINSTANCE;
  }

} //BrowserAutomationFactoryImpl
