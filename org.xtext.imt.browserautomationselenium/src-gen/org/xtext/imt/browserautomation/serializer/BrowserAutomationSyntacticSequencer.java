/*
 * generated by Xtext 2.15.0
 */
package org.xtext.imt.browserautomation.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.imt.browserautomation.services.BrowserAutomationGrammarAccess;

@SuppressWarnings("all")
public class BrowserAutomationSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BrowserAutomationGrammarAccess grammarAccess;
	protected AbstractElementAlias match_CHECK_BOXE_ALLKeyword_1_1_q;
	protected AbstractElementAlias match_CHECK_BOXE_CheckKeyword_0_1_or_UncheckKeyword_0_0;
	protected AbstractElementAlias match_IMAGE___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__a;
	protected AbstractElementAlias match_IMAGE___RightCurlyBracketKeyword_2_2_LeftCurlyBracketKeyword_2_0__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BrowserAutomationGrammarAccess) access;
		match_CHECK_BOXE_ALLKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getCHECK_BOXEAccess().getALLKeyword_1_1());
		match_CHECK_BOXE_CheckKeyword_0_1_or_UncheckKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCHECK_BOXEAccess().getCheckKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getCHECK_BOXEAccess().getUncheckKeyword_0_0()));
		match_IMAGE___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getIMAGEAccess().getLeftCurlyBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getIMAGEAccess().getRightCurlyBracketKeyword_2_2()));
		match_IMAGE___RightCurlyBracketKeyword_2_2_LeftCurlyBracketKeyword_2_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getIMAGEAccess().getRightCurlyBracketKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getIMAGEAccess().getLeftCurlyBracketKeyword_2_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_CHECK_BOXE_ALLKeyword_1_1_q.equals(syntax))
				emit_CHECK_BOXE_ALLKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CHECK_BOXE_CheckKeyword_0_1_or_UncheckKeyword_0_0.equals(syntax))
				emit_CHECK_BOXE_CheckKeyword_0_1_or_UncheckKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IMAGE___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__a.equals(syntax))
				emit_IMAGE___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IMAGE___RightCurlyBracketKeyword_2_2_LeftCurlyBracketKeyword_2_0__a.equals(syntax))
				emit_IMAGE___RightCurlyBracketKeyword_2_2_LeftCurlyBracketKeyword_2_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'ALL'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('uncheck' | 'check') (ambiguity) (rule start)
	 */
	protected void emit_CHECK_BOXE_ALLKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'uncheck' | 'check'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'ALL'? (rule start)
	 *     (rule start) (ambiguity) element+=CHECKBOX
	 */
	protected void emit_CHECK_BOXE_CheckKeyword_0_1_or_UncheckKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) (rule end)
	 *     params+=PARAMS '}' (ambiguity) (rule end)
	 */
	protected void emit_IMAGE___LeftCurlyBracketKeyword_2_0_RightCurlyBracketKeyword_2_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}' '{')*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING '{' (ambiguity) params+=PARAMS
	 *     params+=PARAMS (ambiguity) params+=PARAMS
	 */
	protected void emit_IMAGE___RightCurlyBracketKeyword_2_2_LeftCurlyBracketKeyword_2_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
