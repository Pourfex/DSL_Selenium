/*
 * generated by Xtext 2.15.0
 */
package org.xtext.imt.browserautomation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BrowserAutomationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TestSuitesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.TestSuites");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestSuitesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTestSuitesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestsuitesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestsuitesTestSuiteParserRuleCall_2_0 = (RuleCall)cTestsuitesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestSuites:
		//	{TestSuites}
		//	'TestSuites'
		//	testsuites+=TestSuite*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{TestSuites} 'TestSuites' testsuites+=TestSuite* 'end'
		public Group getGroup() { return cGroup; }
		
		//{TestSuites}
		public Action getTestSuitesAction_0() { return cTestSuitesAction_0; }
		
		//'TestSuites'
		public Keyword getTestSuitesKeyword_1() { return cTestSuitesKeyword_1; }
		
		//testsuites+=TestSuite*
		public Assignment getTestsuitesAssignment_2() { return cTestsuitesAssignment_2; }
		
		//TestSuite
		public RuleCall getTestsuitesTestSuiteParserRuleCall_2_0() { return cTestsuitesTestSuiteParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class TestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.TestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestSuiteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTestsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestsTestParserRuleCall_2_0 = (RuleCall)cTestsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestSuite:
		//	'TestSuite' name=STRING
		//	tests+=Test*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'TestSuite' name=STRING tests+=Test* 'end'
		public Group getGroup() { return cGroup; }
		
		//'TestSuite'
		public Keyword getTestSuiteKeyword_0() { return cTestSuiteKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//tests+=Test*
		public Assignment getTestsAssignment_2() { return cTestsAssignment_2; }
		
		//Test
		public RuleCall getTestsTestParserRuleCall_2_0() { return cTestsTestParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cResultKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResultBOOLParserRuleCall_4_0 = (RuleCall)cResultAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInstructionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInstructionsInstructionParserRuleCall_6_0 = (RuleCall)cInstructionsAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Test:
		//	'Test' name=STRING '(' 'result=' result=BOOL ')'
		//	instructions+=Instruction*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'Test' name=STRING '(' 'result=' result=BOOL ')' instructions+=Instruction* 'end'
		public Group getGroup() { return cGroup; }
		
		//'Test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'result='
		public Keyword getResultKeyword_3() { return cResultKeyword_3; }
		
		//result=BOOL
		public Assignment getResultAssignment_4() { return cResultAssignment_4; }
		
		//BOOL
		public RuleCall getResultBOOLParserRuleCall_4_0() { return cResultBOOLParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_6() { return cInstructionsAssignment_6; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_6_0() { return cInstructionsInstructionParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOPEN_BROWSERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGO_TO_URLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCLICK_ONParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVERIFY_THATParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINSERT_ONParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCHECK_BOXEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCHOOSE_COMBOBOXParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cREAD_ONParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Instruction:
		//	OPEN_BROWSER | GO_TO_URL | CLICK_ON | VERIFY_THAT | INSERT_ON | CHECK_BOXE | CHOOSE_COMBOBOX | READ_ON;
		@Override public ParserRule getRule() { return rule; }
		
		//OPEN_BROWSER | GO_TO_URL | CLICK_ON | VERIFY_THAT | INSERT_ON | CHECK_BOXE | CHOOSE_COMBOBOX | READ_ON
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OPEN_BROWSER
		public RuleCall getOPEN_BROWSERParserRuleCall_0() { return cOPEN_BROWSERParserRuleCall_0; }
		
		//GO_TO_URL
		public RuleCall getGO_TO_URLParserRuleCall_1() { return cGO_TO_URLParserRuleCall_1; }
		
		//CLICK_ON
		public RuleCall getCLICK_ONParserRuleCall_2() { return cCLICK_ONParserRuleCall_2; }
		
		//VERIFY_THAT
		public RuleCall getVERIFY_THATParserRuleCall_3() { return cVERIFY_THATParserRuleCall_3; }
		
		//INSERT_ON
		public RuleCall getINSERT_ONParserRuleCall_4() { return cINSERT_ONParserRuleCall_4; }
		
		//CHECK_BOXE
		public RuleCall getCHECK_BOXEParserRuleCall_5() { return cCHECK_BOXEParserRuleCall_5; }
		
		//CHOOSE_COMBOBOX
		public RuleCall getCHOOSE_COMBOBOXParserRuleCall_6() { return cCHOOSE_COMBOBOXParserRuleCall_6; }
		
		//READ_ON
		public RuleCall getREAD_ONParserRuleCall_7() { return cREAD_ONParserRuleCall_7; }
	}
	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTRUEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	'TRUE' | 'FALSE';
		@Override public ParserRule getRule() { return rule; }
		
		//'TRUE' | 'FALSE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_0() { return cTRUEKeyword_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
	}
	public class OPEN_BROWSERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.OPEN_BROWSER");
		private final Keyword cOpenBrowserKeyword = (Keyword)rule.eContents().get(1);
		
		//OPEN_BROWSER:
		//	'openBrowser';
		@Override public ParserRule getRule() { return rule; }
		
		//'openBrowser'
		public Keyword getOpenBrowserKeyword() { return cOpenBrowserKeyword; }
	}
	public class GO_TO_URLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.GO_TO_URL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenpageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//GO_TO_URL:
		//	'openpage' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'openpage' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'openpage'
		public Keyword getOpenpageKeyword_0() { return cOpenpageKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class CLICK_ONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.CLICK_ON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementClickableParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//CLICK_ON:
		//	'clickOn' element=Clickable;
		@Override public ParserRule getRule() { return rule; }
		
		//'clickOn' element=Clickable
		public Group getGroup() { return cGroup; }
		
		//'clickOn'
		public Keyword getClickOnKeyword_0() { return cClickOnKeyword_0; }
		
		//element=Clickable
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Clickable
		public RuleCall getElementClickableParserRuleCall_1_0() { return cElementClickableParserRuleCall_1_0; }
	}
	public class VERIFY_THATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.VERIFY_THAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementVerifiableParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//VERIFY_THAT:
		//	'verify' element=Verifiable;
		@Override public ParserRule getRule() { return rule; }
		
		//'verify' element=Verifiable
		public Group getGroup() { return cGroup; }
		
		//'verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//element=Verifiable
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Verifiable
		public RuleCall getElementVerifiableParserRuleCall_1_0() { return cElementVerifiableParserRuleCall_1_0; }
	}
	public class INSERT_ONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.INSERT_ON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementInsertableParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Assignment cDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataSTRINGTerminalRuleCall_2_0 = (RuleCall)cDataAssignment_2.eContents().get(0);
		
		//INSERT_ON:
		//	'insert' element=Insertable data=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'insert' element=Insertable data=STRING
		public Group getGroup() { return cGroup; }
		
		//'insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//element=Insertable
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Insertable
		public RuleCall getElementInsertableParserRuleCall_1_0() { return cElementInsertableParserRuleCall_1_0; }
		
		//data=STRING
		public Assignment getDataAssignment_2() { return cDataAssignment_2; }
		
		//STRING
		public RuleCall getDataSTRINGTerminalRuleCall_2_0() { return cDataSTRINGTerminalRuleCall_2_0; }
	}
	public class CHECK_BOXEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.CHECK_BOXE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementCHECKBOXParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final RuleCall cBOOLParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CHECK_BOXE:
		//	'check' element=CHECKBOX BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'check' element=CHECKBOX BOOL
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//element=CHECKBOX
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//CHECKBOX
		public RuleCall getElementCHECKBOXParserRuleCall_1_0() { return cElementCHECKBOXParserRuleCall_1_0; }
		
		//BOOL
		public RuleCall getBOOLParserRuleCall_2() { return cBOOLParserRuleCall_2; }
	}
	public class CHOOSE_COMBOBOXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.CHOOSE_COMBOBOX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoosecomboKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementCOMBOBOXParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cDataSTRINGKeyword_3_0 = (Keyword)cDataAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CHOOSE_COMBOBOX:
		//	'choosecombo' element=COMBOBOX '{' data='STRING' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'choosecombo' element=COMBOBOX '{' data='STRING' '}'
		public Group getGroup() { return cGroup; }
		
		//'choosecombo'
		public Keyword getChoosecomboKeyword_0() { return cChoosecomboKeyword_0; }
		
		//element=COMBOBOX
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//COMBOBOX
		public RuleCall getElementCOMBOBOXParserRuleCall_1_0() { return cElementCOMBOBOXParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//data='STRING'
		public Assignment getDataAssignment_3() { return cDataAssignment_3; }
		
		//'STRING'
		public Keyword getDataSTRINGKeyword_3_0() { return cDataSTRINGKeyword_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class READ_ONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.READ_ON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementReadableParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//READ_ON:
		//	'read' element=Readable;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' element=Readable
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//element=Readable
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Readable
		public RuleCall getElementReadableParserRuleCall_1_0() { return cElementReadableParserRuleCall_1_0; }
	}
	public class ReadableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.Readable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTEXTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBUTTONParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLINKParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Readable:
		//	TEXT | BUTTON | LINK;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT | BUTTON | LINK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEXT
		public RuleCall getTEXTParserRuleCall_0() { return cTEXTParserRuleCall_0; }
		
		//BUTTON
		public RuleCall getBUTTONParserRuleCall_1() { return cBUTTONParserRuleCall_1; }
		
		//LINK
		public RuleCall getLINKParserRuleCall_2() { return cLINKParserRuleCall_2; }
	}
	public class InsertableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.Insertable");
		private final RuleCall cSEARCH_FIELDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Insertable:
		//	SEARCH_FIELD;
		@Override public ParserRule getRule() { return rule; }
		
		//SEARCH_FIELD
		public RuleCall getSEARCH_FIELDParserRuleCall() { return cSEARCH_FIELDParserRuleCall; }
	}
	public class VerifiableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.Verifiable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTEXTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBUTTONParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLINKParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIMAGEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Verifiable:
		//	TEXT | BUTTON | LINK | IMAGE;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT | BUTTON | LINK | IMAGE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEXT
		public RuleCall getTEXTParserRuleCall_0() { return cTEXTParserRuleCall_0; }
		
		//BUTTON
		public RuleCall getBUTTONParserRuleCall_1() { return cBUTTONParserRuleCall_1; }
		
		//LINK
		public RuleCall getLINKParserRuleCall_2() { return cLINKParserRuleCall_2; }
		
		//IMAGE
		public RuleCall getIMAGEParserRuleCall_3() { return cIMAGEParserRuleCall_3; }
	}
	public class ClickableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.Clickable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBUTTONParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLINKParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIMAGEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCOMBOBOXParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Clickable:
		//	BUTTON | LINK | IMAGE | COMBOBOX;
		@Override public ParserRule getRule() { return rule; }
		
		//BUTTON | LINK | IMAGE | COMBOBOX
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BUTTON
		public RuleCall getBUTTONParserRuleCall_0() { return cBUTTONParserRuleCall_0; }
		
		//LINK
		public RuleCall getLINKParserRuleCall_1() { return cLINKParserRuleCall_1; }
		
		//IMAGE
		public RuleCall getIMAGEParserRuleCall_2() { return cIMAGEParserRuleCall_2; }
		
		//COMBOBOX
		public RuleCall getCOMBOBOXParserRuleCall_3() { return cCOMBOBOXParserRuleCall_3; }
	}
	public class COMBOBOXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.COMBOBOX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComboboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//COMBOBOX:
		//	'combobox' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'combobox' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'combobox'
		public Keyword getComboboxKeyword_0() { return cComboboxKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class CHECKBOXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.CHECKBOX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//CHECKBOX:
		//	'checkbox' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'checkbox' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SEARCH_FIELDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.SEARCH_FIELD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchfieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SEARCH_FIELD:
		//	'searchfield' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'searchfield' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'searchfield'
		public Keyword getSearchfieldKeyword_0() { return cSearchfieldKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class TEXTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.TEXT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TEXT:
		//	'text' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'text' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class BUTTONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.BUTTON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BUTTON:
		//	'button' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class LINKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.LINK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//LINK:
		//	'link' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'link' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class IMAGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.imt.browserautomation.BrowserAutomation.IMAGE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamSTRINGTerminalRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		
		//IMAGE:
		//	'image' name=STRING param=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'image' name=STRING param=STRING
		public Group getGroup() { return cGroup; }
		
		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//param=STRING
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//STRING
		public RuleCall getParamSTRINGTerminalRuleCall_2_0() { return cParamSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final TestSuitesElements pTestSuites;
	private final TestSuiteElements pTestSuite;
	private final TestElements pTest;
	private final InstructionElements pInstruction;
	private final BOOLElements pBOOL;
	private final OPEN_BROWSERElements pOPEN_BROWSER;
	private final GO_TO_URLElements pGO_TO_URL;
	private final CLICK_ONElements pCLICK_ON;
	private final VERIFY_THATElements pVERIFY_THAT;
	private final INSERT_ONElements pINSERT_ON;
	private final CHECK_BOXEElements pCHECK_BOXE;
	private final CHOOSE_COMBOBOXElements pCHOOSE_COMBOBOX;
	private final READ_ONElements pREAD_ON;
	private final ReadableElements pReadable;
	private final InsertableElements pInsertable;
	private final VerifiableElements pVerifiable;
	private final ClickableElements pClickable;
	private final COMBOBOXElements pCOMBOBOX;
	private final CHECKBOXElements pCHECKBOX;
	private final SEARCH_FIELDElements pSEARCH_FIELD;
	private final TEXTElements pTEXT;
	private final BUTTONElements pBUTTON;
	private final LINKElements pLINK;
	private final IMAGEElements pIMAGE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BrowserAutomationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTestSuites = new TestSuitesElements();
		this.pTestSuite = new TestSuiteElements();
		this.pTest = new TestElements();
		this.pInstruction = new InstructionElements();
		this.pBOOL = new BOOLElements();
		this.pOPEN_BROWSER = new OPEN_BROWSERElements();
		this.pGO_TO_URL = new GO_TO_URLElements();
		this.pCLICK_ON = new CLICK_ONElements();
		this.pVERIFY_THAT = new VERIFY_THATElements();
		this.pINSERT_ON = new INSERT_ONElements();
		this.pCHECK_BOXE = new CHECK_BOXEElements();
		this.pCHOOSE_COMBOBOX = new CHOOSE_COMBOBOXElements();
		this.pREAD_ON = new READ_ONElements();
		this.pReadable = new ReadableElements();
		this.pInsertable = new InsertableElements();
		this.pVerifiable = new VerifiableElements();
		this.pClickable = new ClickableElements();
		this.pCOMBOBOX = new COMBOBOXElements();
		this.pCHECKBOX = new CHECKBOXElements();
		this.pSEARCH_FIELD = new SEARCH_FIELDElements();
		this.pTEXT = new TEXTElements();
		this.pBUTTON = new BUTTONElements();
		this.pLINK = new LINKElements();
		this.pIMAGE = new IMAGEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.imt.browserautomation.BrowserAutomation".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TestSuites:
	//	{TestSuites}
	//	'TestSuites'
	//	testsuites+=TestSuite*
	//	'end';
	public TestSuitesElements getTestSuitesAccess() {
		return pTestSuites;
	}
	
	public ParserRule getTestSuitesRule() {
		return getTestSuitesAccess().getRule();
	}
	
	//TestSuite:
	//	'TestSuite' name=STRING
	//	tests+=Test*
	//	'end';
	public TestSuiteElements getTestSuiteAccess() {
		return pTestSuite;
	}
	
	public ParserRule getTestSuiteRule() {
		return getTestSuiteAccess().getRule();
	}
	
	//Test:
	//	'Test' name=STRING '(' 'result=' result=BOOL ')'
	//	instructions+=Instruction*
	//	'end';
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//Instruction:
	//	OPEN_BROWSER | GO_TO_URL | CLICK_ON | VERIFY_THAT | INSERT_ON | CHECK_BOXE | CHOOSE_COMBOBOX | READ_ON;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//BOOL:
	//	'TRUE' | 'FALSE';
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}
	
	//OPEN_BROWSER:
	//	'openBrowser';
	public OPEN_BROWSERElements getOPEN_BROWSERAccess() {
		return pOPEN_BROWSER;
	}
	
	public ParserRule getOPEN_BROWSERRule() {
		return getOPEN_BROWSERAccess().getRule();
	}
	
	//GO_TO_URL:
	//	'openpage' url=STRING;
	public GO_TO_URLElements getGO_TO_URLAccess() {
		return pGO_TO_URL;
	}
	
	public ParserRule getGO_TO_URLRule() {
		return getGO_TO_URLAccess().getRule();
	}
	
	//CLICK_ON:
	//	'clickOn' element=Clickable;
	public CLICK_ONElements getCLICK_ONAccess() {
		return pCLICK_ON;
	}
	
	public ParserRule getCLICK_ONRule() {
		return getCLICK_ONAccess().getRule();
	}
	
	//VERIFY_THAT:
	//	'verify' element=Verifiable;
	public VERIFY_THATElements getVERIFY_THATAccess() {
		return pVERIFY_THAT;
	}
	
	public ParserRule getVERIFY_THATRule() {
		return getVERIFY_THATAccess().getRule();
	}
	
	//INSERT_ON:
	//	'insert' element=Insertable data=STRING;
	public INSERT_ONElements getINSERT_ONAccess() {
		return pINSERT_ON;
	}
	
	public ParserRule getINSERT_ONRule() {
		return getINSERT_ONAccess().getRule();
	}
	
	//CHECK_BOXE:
	//	'check' element=CHECKBOX BOOL;
	public CHECK_BOXEElements getCHECK_BOXEAccess() {
		return pCHECK_BOXE;
	}
	
	public ParserRule getCHECK_BOXERule() {
		return getCHECK_BOXEAccess().getRule();
	}
	
	//CHOOSE_COMBOBOX:
	//	'choosecombo' element=COMBOBOX '{' data='STRING' '}';
	public CHOOSE_COMBOBOXElements getCHOOSE_COMBOBOXAccess() {
		return pCHOOSE_COMBOBOX;
	}
	
	public ParserRule getCHOOSE_COMBOBOXRule() {
		return getCHOOSE_COMBOBOXAccess().getRule();
	}
	
	//READ_ON:
	//	'read' element=Readable;
	public READ_ONElements getREAD_ONAccess() {
		return pREAD_ON;
	}
	
	public ParserRule getREAD_ONRule() {
		return getREAD_ONAccess().getRule();
	}
	
	//Readable:
	//	TEXT | BUTTON | LINK;
	public ReadableElements getReadableAccess() {
		return pReadable;
	}
	
	public ParserRule getReadableRule() {
		return getReadableAccess().getRule();
	}
	
	//Insertable:
	//	SEARCH_FIELD;
	public InsertableElements getInsertableAccess() {
		return pInsertable;
	}
	
	public ParserRule getInsertableRule() {
		return getInsertableAccess().getRule();
	}
	
	//Verifiable:
	//	TEXT | BUTTON | LINK | IMAGE;
	public VerifiableElements getVerifiableAccess() {
		return pVerifiable;
	}
	
	public ParserRule getVerifiableRule() {
		return getVerifiableAccess().getRule();
	}
	
	//Clickable:
	//	BUTTON | LINK | IMAGE | COMBOBOX;
	public ClickableElements getClickableAccess() {
		return pClickable;
	}
	
	public ParserRule getClickableRule() {
		return getClickableAccess().getRule();
	}
	
	//COMBOBOX:
	//	'combobox' name=STRING;
	public COMBOBOXElements getCOMBOBOXAccess() {
		return pCOMBOBOX;
	}
	
	public ParserRule getCOMBOBOXRule() {
		return getCOMBOBOXAccess().getRule();
	}
	
	//CHECKBOX:
	//	'checkbox' name=STRING;
	public CHECKBOXElements getCHECKBOXAccess() {
		return pCHECKBOX;
	}
	
	public ParserRule getCHECKBOXRule() {
		return getCHECKBOXAccess().getRule();
	}
	
	//SEARCH_FIELD:
	//	'searchfield' name=STRING;
	public SEARCH_FIELDElements getSEARCH_FIELDAccess() {
		return pSEARCH_FIELD;
	}
	
	public ParserRule getSEARCH_FIELDRule() {
		return getSEARCH_FIELDAccess().getRule();
	}
	
	//TEXT:
	//	'text' name=STRING;
	public TEXTElements getTEXTAccess() {
		return pTEXT;
	}
	
	public ParserRule getTEXTRule() {
		return getTEXTAccess().getRule();
	}
	
	//BUTTON:
	//	'button' name=STRING;
	public BUTTONElements getBUTTONAccess() {
		return pBUTTON;
	}
	
	public ParserRule getBUTTONRule() {
		return getBUTTONAccess().getRule();
	}
	
	//LINK:
	//	'link' url=STRING;
	public LINKElements getLINKAccess() {
		return pLINK;
	}
	
	public ParserRule getLINKRule() {
		return getLINKAccess().getRule();
	}
	
	//IMAGE:
	//	'image' name=STRING param=STRING;
	public IMAGEElements getIMAGEAccess() {
		return pIMAGE;
	}
	
	public ParserRule getIMAGERule() {
		return getIMAGEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
