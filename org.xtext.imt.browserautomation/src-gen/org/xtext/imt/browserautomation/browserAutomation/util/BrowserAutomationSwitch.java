/**
 * generated by Xtext 2.15.0
 */
package org.xtext.imt.browserautomation.browserAutomation.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.imt.browserautomation.browserAutomation.BUTTON;
import org.xtext.imt.browserautomation.browserAutomation.BrowserAutomationPackage;
import org.xtext.imt.browserautomation.browserAutomation.CHECKBOX;
import org.xtext.imt.browserautomation.browserAutomation.CHECK_BOXE;
import org.xtext.imt.browserautomation.browserAutomation.CHOOSE_COMBOBOX;
import org.xtext.imt.browserautomation.browserAutomation.CLICK_ON;
import org.xtext.imt.browserautomation.browserAutomation.COMBOBOX;
import org.xtext.imt.browserautomation.browserAutomation.Clickable;
import org.xtext.imt.browserautomation.browserAutomation.GO_TO_URL;
import org.xtext.imt.browserautomation.browserAutomation.IMAGE;
import org.xtext.imt.browserautomation.browserAutomation.INSERT_ON;
import org.xtext.imt.browserautomation.browserAutomation.Insertable;
import org.xtext.imt.browserautomation.browserAutomation.Instruction;
import org.xtext.imt.browserautomation.browserAutomation.LINK;
import org.xtext.imt.browserautomation.browserAutomation.READ_ON;
import org.xtext.imt.browserautomation.browserAutomation.SEARCH_FIELD;
import org.xtext.imt.browserautomation.browserAutomation.TEXT;
import org.xtext.imt.browserautomation.browserAutomation.Test;
import org.xtext.imt.browserautomation.browserAutomation.TestSuite;
import org.xtext.imt.browserautomation.browserAutomation.TestSuites;
import org.xtext.imt.browserautomation.browserAutomation.VERIFY_THAT;
import org.xtext.imt.browserautomation.browserAutomation.Verifiable;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.imt.browserautomation.browserAutomation.BrowserAutomationPackage
 * @generated
 */
public class BrowserAutomationSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BrowserAutomationPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserAutomationSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = BrowserAutomationPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case BrowserAutomationPackage.TEST_SUITES:
      {
        TestSuites testSuites = (TestSuites)theEObject;
        T result = caseTestSuites(testSuites);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.TEST_SUITE:
      {
        TestSuite testSuite = (TestSuite)theEObject;
        T result = caseTestSuite(testSuite);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.TEST:
      {
        Test test = (Test)theEObject;
        T result = caseTest(test);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.INSTRUCTION:
      {
        Instruction instruction = (Instruction)theEObject;
        T result = caseInstruction(instruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.GO_TO_URL:
      {
        GO_TO_URL gO_TO_URL = (GO_TO_URL)theEObject;
        T result = caseGO_TO_URL(gO_TO_URL);
        if (result == null) result = caseInstruction(gO_TO_URL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.CLICK_ON:
      {
        CLICK_ON clicK_ON = (CLICK_ON)theEObject;
        T result = caseCLICK_ON(clicK_ON);
        if (result == null) result = caseInstruction(clicK_ON);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.VERIFY_THAT:
      {
        VERIFY_THAT verifY_THAT = (VERIFY_THAT)theEObject;
        T result = caseVERIFY_THAT(verifY_THAT);
        if (result == null) result = caseInstruction(verifY_THAT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.INSERT_ON:
      {
        INSERT_ON inserT_ON = (INSERT_ON)theEObject;
        T result = caseINSERT_ON(inserT_ON);
        if (result == null) result = caseInstruction(inserT_ON);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.CHECK_BOXE:
      {
        CHECK_BOXE checK_BOXE = (CHECK_BOXE)theEObject;
        T result = caseCHECK_BOXE(checK_BOXE);
        if (result == null) result = caseInstruction(checK_BOXE);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.CHOOSE_COMBOBOX:
      {
        CHOOSE_COMBOBOX choosE_COMBOBOX = (CHOOSE_COMBOBOX)theEObject;
        T result = caseCHOOSE_COMBOBOX(choosE_COMBOBOX);
        if (result == null) result = caseInstruction(choosE_COMBOBOX);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.READ_ON:
      {
        READ_ON reaD_ON = (READ_ON)theEObject;
        T result = caseREAD_ON(reaD_ON);
        if (result == null) result = caseInstruction(reaD_ON);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.READABLE:
      {
        org.xtext.imt.browserautomation.browserAutomation.Readable readable = (org.xtext.imt.browserautomation.browserAutomation.Readable)theEObject;
        T result = caseReadable(readable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.INSERTABLE:
      {
        Insertable insertable = (Insertable)theEObject;
        T result = caseInsertable(insertable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.VERIFIABLE:
      {
        Verifiable verifiable = (Verifiable)theEObject;
        T result = caseVerifiable(verifiable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.CLICKABLE:
      {
        Clickable clickable = (Clickable)theEObject;
        T result = caseClickable(clickable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.COMBOBOX:
      {
        COMBOBOX combobox = (COMBOBOX)theEObject;
        T result = caseCOMBOBOX(combobox);
        if (result == null) result = caseClickable(combobox);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.CHECKBOX:
      {
        CHECKBOX checkbox = (CHECKBOX)theEObject;
        T result = caseCHECKBOX(checkbox);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.SEARCH_FIELD:
      {
        SEARCH_FIELD searcH_FIELD = (SEARCH_FIELD)theEObject;
        T result = caseSEARCH_FIELD(searcH_FIELD);
        if (result == null) result = caseInsertable(searcH_FIELD);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.TEXT:
      {
        TEXT text = (TEXT)theEObject;
        T result = caseTEXT(text);
        if (result == null) result = caseReadable(text);
        if (result == null) result = caseVerifiable(text);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.BUTTON:
      {
        BUTTON button = (BUTTON)theEObject;
        T result = caseBUTTON(button);
        if (result == null) result = caseReadable(button);
        if (result == null) result = caseVerifiable(button);
        if (result == null) result = caseClickable(button);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.LINK:
      {
        LINK link = (LINK)theEObject;
        T result = caseLINK(link);
        if (result == null) result = caseReadable(link);
        if (result == null) result = caseVerifiable(link);
        if (result == null) result = caseClickable(link);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BrowserAutomationPackage.IMAGE:
      {
        IMAGE image = (IMAGE)theEObject;
        T result = caseIMAGE(image);
        if (result == null) result = caseVerifiable(image);
        if (result == null) result = caseClickable(image);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Test Suites</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Test Suites</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTestSuites(TestSuites object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Test Suite</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Test Suite</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTestSuite(TestSuite object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTest(Test object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstruction(Instruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>GO TO URL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>GO TO URL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGO_TO_URL(GO_TO_URL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CLICK ON</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CLICK ON</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCLICK_ON(CLICK_ON object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VERIFY THAT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VERIFY THAT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVERIFY_THAT(VERIFY_THAT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INSERT ON</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INSERT ON</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINSERT_ON(INSERT_ON object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CHECK BOXE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CHECK BOXE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCHECK_BOXE(CHECK_BOXE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CHOOSE COMBOBOX</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CHOOSE COMBOBOX</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCHOOSE_COMBOBOX(CHOOSE_COMBOBOX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>READ ON</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>READ ON</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseREAD_ON(READ_ON object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Readable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Readable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadable(org.xtext.imt.browserautomation.browserAutomation.Readable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insertable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insertable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsertable(Insertable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Verifiable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Verifiable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVerifiable(Verifiable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clickable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clickable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClickable(Clickable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COMBOBOX</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COMBOBOX</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOMBOBOX(COMBOBOX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CHECKBOX</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CHECKBOX</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCHECKBOX(CHECKBOX object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SEARCH FIELD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SEARCH FIELD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSEARCH_FIELD(SEARCH_FIELD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TEXT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TEXT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTEXT(TEXT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BUTTON</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BUTTON</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBUTTON(BUTTON object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LINK</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LINK</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLINK(LINK object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IMAGE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IMAGE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIMAGE(IMAGE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //BrowserAutomationSwitch
