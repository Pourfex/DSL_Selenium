/**
 * generated by Xtext 2.15.0
 */
package org.xtext.imt.browserautomation.browserAutomation.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.imt.browserautomation.browserAutomation.BUTTON;
import org.xtext.imt.browserautomation.browserAutomation.BrowserAutomationPackage;
import org.xtext.imt.browserautomation.browserAutomation.CHECKBOX;
import org.xtext.imt.browserautomation.browserAutomation.CHECK_BOXE;
import org.xtext.imt.browserautomation.browserAutomation.CHOOSE_COMBOBOX;
import org.xtext.imt.browserautomation.browserAutomation.CLICK_ON;
import org.xtext.imt.browserautomation.browserAutomation.COMBOBOX;
import org.xtext.imt.browserautomation.browserAutomation.Clickable;
import org.xtext.imt.browserautomation.browserAutomation.GO_TO_URL;
import org.xtext.imt.browserautomation.browserAutomation.IMAGE;
import org.xtext.imt.browserautomation.browserAutomation.INSERT_ON;
import org.xtext.imt.browserautomation.browserAutomation.Insertable;
import org.xtext.imt.browserautomation.browserAutomation.Instruction;
import org.xtext.imt.browserautomation.browserAutomation.LINK;
import org.xtext.imt.browserautomation.browserAutomation.READ_ON;
import org.xtext.imt.browserautomation.browserAutomation.SEARCH_FIELD;
import org.xtext.imt.browserautomation.browserAutomation.TEXT;
import org.xtext.imt.browserautomation.browserAutomation.Test;
import org.xtext.imt.browserautomation.browserAutomation.TestSuite;
import org.xtext.imt.browserautomation.browserAutomation.TestSuites;
import org.xtext.imt.browserautomation.browserAutomation.VERIFY_THAT;
import org.xtext.imt.browserautomation.browserAutomation.Verifiable;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.imt.browserautomation.browserAutomation.BrowserAutomationPackage
 * @generated
 */
public class BrowserAutomationAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BrowserAutomationPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserAutomationAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BrowserAutomationPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BrowserAutomationSwitch<Adapter> modelSwitch =
    new BrowserAutomationSwitch<Adapter>()
    {
      @Override
      public Adapter caseTestSuites(TestSuites object)
      {
        return createTestSuitesAdapter();
      }
      @Override
      public Adapter caseTestSuite(TestSuite object)
      {
        return createTestSuiteAdapter();
      }
      @Override
      public Adapter caseTest(Test object)
      {
        return createTestAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseGO_TO_URL(GO_TO_URL object)
      {
        return createGO_TO_URLAdapter();
      }
      @Override
      public Adapter caseCLICK_ON(CLICK_ON object)
      {
        return createCLICK_ONAdapter();
      }
      @Override
      public Adapter caseVERIFY_THAT(VERIFY_THAT object)
      {
        return createVERIFY_THATAdapter();
      }
      @Override
      public Adapter caseINSERT_ON(INSERT_ON object)
      {
        return createINSERT_ONAdapter();
      }
      @Override
      public Adapter caseCHECK_BOXE(CHECK_BOXE object)
      {
        return createCHECK_BOXEAdapter();
      }
      @Override
      public Adapter caseCHOOSE_COMBOBOX(CHOOSE_COMBOBOX object)
      {
        return createCHOOSE_COMBOBOXAdapter();
      }
      @Override
      public Adapter caseREAD_ON(READ_ON object)
      {
        return createREAD_ONAdapter();
      }
      @Override
      public Adapter caseReadable(org.xtext.imt.browserautomation.browserAutomation.Readable object)
      {
        return createReadableAdapter();
      }
      @Override
      public Adapter caseInsertable(Insertable object)
      {
        return createInsertableAdapter();
      }
      @Override
      public Adapter caseVerifiable(Verifiable object)
      {
        return createVerifiableAdapter();
      }
      @Override
      public Adapter caseClickable(Clickable object)
      {
        return createClickableAdapter();
      }
      @Override
      public Adapter caseCOMBOBOX(COMBOBOX object)
      {
        return createCOMBOBOXAdapter();
      }
      @Override
      public Adapter caseCHECKBOX(CHECKBOX object)
      {
        return createCHECKBOXAdapter();
      }
      @Override
      public Adapter caseSEARCH_FIELD(SEARCH_FIELD object)
      {
        return createSEARCH_FIELDAdapter();
      }
      @Override
      public Adapter caseTEXT(TEXT object)
      {
        return createTEXTAdapter();
      }
      @Override
      public Adapter caseBUTTON(BUTTON object)
      {
        return createBUTTONAdapter();
      }
      @Override
      public Adapter caseLINK(LINK object)
      {
        return createLINKAdapter();
      }
      @Override
      public Adapter caseIMAGE(IMAGE object)
      {
        return createIMAGEAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.TestSuites <em>Test Suites</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.TestSuites
   * @generated
   */
  public Adapter createTestSuitesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.TestSuite <em>Test Suite</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.TestSuite
   * @generated
   */
  public Adapter createTestSuiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.Test <em>Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.Test
   * @generated
   */
  public Adapter createTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.GO_TO_URL <em>GO TO URL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.GO_TO_URL
   * @generated
   */
  public Adapter createGO_TO_URLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.CLICK_ON <em>CLICK ON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.CLICK_ON
   * @generated
   */
  public Adapter createCLICK_ONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.VERIFY_THAT <em>VERIFY THAT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.VERIFY_THAT
   * @generated
   */
  public Adapter createVERIFY_THATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.INSERT_ON <em>INSERT ON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.INSERT_ON
   * @generated
   */
  public Adapter createINSERT_ONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.CHECK_BOXE <em>CHECK BOXE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.CHECK_BOXE
   * @generated
   */
  public Adapter createCHECK_BOXEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.CHOOSE_COMBOBOX <em>CHOOSE COMBOBOX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.CHOOSE_COMBOBOX
   * @generated
   */
  public Adapter createCHOOSE_COMBOBOXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.READ_ON <em>READ ON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.READ_ON
   * @generated
   */
  public Adapter createREAD_ONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.Readable <em>Readable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.Readable
   * @generated
   */
  public Adapter createReadableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.Insertable <em>Insertable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.Insertable
   * @generated
   */
  public Adapter createInsertableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.Verifiable <em>Verifiable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.Verifiable
   * @generated
   */
  public Adapter createVerifiableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.Clickable <em>Clickable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.Clickable
   * @generated
   */
  public Adapter createClickableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.COMBOBOX <em>COMBOBOX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.COMBOBOX
   * @generated
   */
  public Adapter createCOMBOBOXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.CHECKBOX <em>CHECKBOX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.CHECKBOX
   * @generated
   */
  public Adapter createCHECKBOXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.SEARCH_FIELD <em>SEARCH FIELD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.SEARCH_FIELD
   * @generated
   */
  public Adapter createSEARCH_FIELDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.TEXT <em>TEXT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.TEXT
   * @generated
   */
  public Adapter createTEXTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.BUTTON <em>BUTTON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.BUTTON
   * @generated
   */
  public Adapter createBUTTONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.LINK <em>LINK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.LINK
   * @generated
   */
  public Adapter createLINKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.imt.browserautomation.browserAutomation.IMAGE <em>IMAGE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.imt.browserautomation.browserAutomation.IMAGE
   * @generated
   */
  public Adapter createIMAGEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BrowserAutomationAdapterFactory
